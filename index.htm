<html>
<head>
<title>인공지능 바른 자세 판독기</title>
<h1>인공지능 바른 자세 판독기</h1>
<hr>
<h2>인공지능 자세 판독기는 인공지능 기술을 사용하여<br>사용자의 자세가 바른지 확인하여 줍니다.</h2>
<h3>카메라를 사용자의 가슴 부분까지 나오게 잡은 후 '시작'버튼을 누르십시오.</h3>
<hr>
</head>
<body style="background-image:url('bg.bmp')">
<link rel="stylesheet" href="style.css">

<button type="button" onclick="init()">시작</button>
<p>
<div id="webcam-container"></div>
<div id="label-container"></div>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>
<script type="text/javascript">
    // the link to your model provided by Teachable Machine export panel
    const URL = "https://teachablemachine.withgoogle.com/models/b9xmXYCP8/";

    let model, webcam, labelContainer, maxPredictions;

    // Load the image model and setup the webcam
    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const flip = true; // whether to flip the webcam
        webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append elements to the DOM
        document.getElementById("webcam-container").appendChild(webcam.canvas);
        labelContainer = document.getElementById("label-container");
    }

    async function loop() {
        webcam.update(); // update the webcam frame
        await predict();
        window.requestAnimationFrame(loop);
    }

    // run the webcam image through the image model
    async function predict() {
        // predict can take in an image, video or canvas html element
        const prediction = await model.predict(webcam.canvas);
        
        // Class 1 and Class 2 probabilities
        const class1Probability = prediction[0].probability; // Class 1: 바른 자세
        const class2Probability = prediction[1].probability; // Class 2: 바르지 않은 자세

        // Show result based on which class has higher probability
        if (class1Probability > class2Probability) {
            labelContainer.innerHTML = "<br><h2>바른 자세</h2>";
        } else {
            labelContainer.innerHTML = "<br><h2>바르지 않은 자세</h2>";
        }
    }
</script>
</body>
</html>
